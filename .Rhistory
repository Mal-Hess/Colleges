#making a list of all the years that this player has played in
xpath <- "//*[@id='stats_sub_index']/ul/li[4]/ul/li/a"
nodes <- getNodeSet(data, xpath)
years <- sapply(nodes, xmlValue)
#cleaning up the list of years, need to remove postseason and turn characters to numbers
years <- years[!is.element(years, "Postseason")]
years <- as.numeric(years)
years<-sort(years)
amountofyears <- length(years)
getyeardata <- function(ident = identity, year=2014){
#setting up URL to get data from a specific year
url1<- "http://www.baseball-reference.com/players/gl.cgi?id="
url2<- "&t=b&year="
urlyear <- paste(url1, identity, url2, year, sep="")
#downloading html site and taking out the table with the batting data
html <- htmlTreeParse(urlyear, useInternal=TRUE)
tables <- readHTMLTable(html)
batlog<- tables$batting_gamelogs
rows<- nrow(batlog)
i<-1
while(i<=rows){ #removes Month rows
if(batlog[i,1]=="April" | batlog[i,1]=="May" | batlog[i,1]=="June"|
batlog[i,1]=="July"| batlog[i,1]=="August"| batlog[i,1]=="September"|
batlog[i,1]=="October"){
batlog <- batlog[-i,]
i <- i - 1
rows <- nrow(batlog)
}
i <- i + 1
}
#adding a column to the front of the data that has identity and year on it
#remove first column which is just row number, imported from html table.
batlog <- batlog[,-1]
batlog <- transform(batlog, Player=identity)
batlog <- transform(batlog, Year=year)
temp<- batlog[,36:37]
batlog <- batlog[,-36:-37]
batlog <- cbind(temp,batlog)
#more data cleanup. Var.5 is currently the home/away column, away games signified with @
#Date variable transformed to character so I can clean up the dates and later and a year to it.
rows<- nrow(batlog)
batlog <- transform(batlog, Var.5= as.character(Var.5), Date=as.character(Date), Gtm = as.character(Gtm))
#double headers have extra symbols on them after the date, I need to
#remove (1) or (2) from them to properly transform it to a date class.
#Gtm will also have extra () based on amount of games a player missed
#I am also adding the year to the end of the date.
i <-1
while(i<=rows){
if(grepl("\\)", batlog$Date[i])) {
nc <- nchar(batlog$Date[i])
batlog$Date[i]<- substring(batlogDate[i], 1, (nc-4))
}
batlog$Date[i]<- paste(batlog$Date[i], year, sep=", ")
i <- i +1 }
batlog<- subset(batlog, Gcar != "Tm")
batlog<- subset(batlog, H != "HR")
#more data cleaning
colnames(batlog)[7] <- "Home"
batlog <- transform(batlog, DELTAAVG= NA, BA = as.numeric(as.character(BA)), Home = as.character(Home))
#One K loop to do two things.  First, deal with issues of home/away, second create deltaavg.
#adds "H" (symbolize home game) to blank entires, away games are "@" symbol
k<-1
while(k<=nrow(batlog)){
if(batlog[k,7]!= "@"){
batlog[k,7] <- "H"
}
##Makes new variable (deltaavg) that is the difference of Batting average from day to day
if((k+1) <= nrow(batlog)){
batlogDELTAAVG[(k+1)]<-(batlogBA[(k+1)] - batlog$BA[k])
}
k<-k+1
} #end of k while loop
batlog
}#end of getyeardata
#initializing object (careerdata) which will become the main dataframe
careerdata <- NULL
j<-1
#Go through all years and rbind the data together into the careerdata object
while (j <= amountofyears){
b<- getyeardata(identity, year = years[j])
careerdata <- rbind(careerdata, b)
j<-j+1
}
filename <- paste0(identity, ".csv")
write.csv(careerdata, file= filename)
setwd(originalwd)
} #End of create player function!
createplayer("derek", "jeter", 1)
createplayer <- function(playerfirstname, playerlastname, key=1){
require(XML)
require(RCurl)
#check if key is valid entry
if (class(key)!= "numeric"){
stop("Invalid key: Requires number 1-9")
stop}
if (key > 9 | key < 1){
stop("Invalid key: Requires number 1-9")
stop}
#keys are always two digit, so if less than 10 it makes
#key to a string and adds a zero to the front
if (key < 10){
key <- substring(toString(key), 1, 1)
key <- paste("0", key, sep="")
}
#checks to see if Baseball directory exists, and if not creates it.
if(!file.exists("Baseball")){dir.create("/Baseball") }
originalwd <- getwd()
setwd("Baseball")
playerfirstname <- as.character(playerfirstname)
playerlastname <- as.character(playerlastname)
#cleaning names and key to make player identity object
subfirst <- substring(playerfirstname, 1, 2)
sublast <- substring(playerlastname, 1, 5)
identity <- paste(sublast, subfirst, key, sep="")
identity <- tolower(identity)
#checks to see if player already exists in local database
filename <- paste0(identity, ".csv")
if(file.exists(filename)){
stop("Player already exists in database")
}
#making url to get to base page for the specified player
url <- paste0("http://www.baseball-reference.com/players/gl.cgi?id=", identity)
raw <- getURL(url)
data <- htmlParse(raw)
#making a list of all the years that this player has played in
xpath <- "//*[@id='stats_sub_index']/ul/li[4]/ul/li/a"
nodes <- getNodeSet(data, xpath)
years <- sapply(nodes, xmlValue)
#cleaning up the list of years, need to remove postseason and turn characters to numbers
years <- years[!is.element(years, "Postseason")]
years <- as.numeric(years)
years<-sort(years)
amountofyears <- length(years)
getyeardata <- function(ident = identity, year=2014){
#setting up URL to get data from a specific year
url1<- "http://www.baseball-reference.com/players/gl.cgi?id="
url2<- "&t=b&year="
urlyear <- paste(url1, identity, url2, year, sep="")
#downloading html site and taking out the table with the batting data
html <- htmlTreeParse(urlyear, useInternal=TRUE)
tables <- readHTMLTable(html)
batlog<- tables$batting_gamelogs
rows<- nrow(batlog)
i<-1
while(i<=rows){ #removes Month rows
if(batlog[i,1]=="April" | batlog[i,1]=="May" | batlog[i,1]=="June"|
batlog[i,1]=="July"| batlog[i,1]=="August"| batlog[i,1]=="September"|
batlog[i,1]=="October"){
batlog <- batlog[-i,]
i <- i - 1
rows <- nrow(batlog)
}
i <- i + 1
}
#adding a column to the front of the data that has identity and year on it
#remove first column which is just row number, imported from html table.
batlog <- batlog[,-1]
batlog <- transform(batlog, Player=identity)
batlog <- transform(batlog, Year=year)
temp<- batlog[,36:37]
batlog <- batlog[,-36:-37]
batlog <- cbind(temp,batlog)
#more data cleanup. Var.5 is currently the home/away column, away games signified with @
#Date variable transformed to character so I can clean up the dates and later and a year to it.
rows<- nrow(batlog)
batlog <- transform(batlog, Var.5= as.character(Var.5), Date=as.character(Date), Gtm = as.character(Gtm))
#double headers have extra symbols on them after the date, I need to
#remove (1) or (2) from them to properly transform it to a date class.
#Gtm will also have extra () based on amount of games a player missed
#I am also adding the year to the end of the date.
i <-1
while(i<=rows){
if(grepl("\\)", batlog$Date[i])) {
nc <- nchar(batlog$Date[i])
batlog$Date[i]<- substring(batlog$Date[i], 1, (nc-4))
}
batlog$Date[i]<- paste(batlog$Date[i], year, sep=", ")
i <- i +1 }
batlog<- subset(batlog, Gcar != "Tm")
batlog<- subset(batlog, H != "HR")
#more data cleaning
colnames(batlog)[7] <- "Home"
batlog <- transform(batlog, DELTAAVG= NA, BA = as.numeric(as.character(BA)), Home = as.character(Home))
#One K loop to do two things.  First, deal with issues of home/away, second create deltaavg.
#adds "H" (symbolize home game) to blank entires, away games are "@" symbol
k<-1
while(k<=nrow(batlog)){
if(batlog[k,7]!= "@"){
batlog[k,7] <- "H"
}
##Makes new variable (deltaavg) that is the difference of Batting average from day to day
if((k+1) <= nrow(batlog)){
batlog$DELTAAVG[(k+1)]<-(batlog$BA[(k+1)] - batlog$BA[k])
}
k<-k+1
} #end of k while loop
batlog
}#end of getyeardata
#initializing object (careerdata) which will become the main dataframe
careerdata <- NULL
j<-1
#Go through all years and rbind the data together into the careerdata object
while (j <= amountofyears){
b<- getyeardata(identity, year = years[j])
careerdata <- rbind(careerdata, b)
j<-j+1
}
filename <- paste0(identity, ".csv")
write.csv(careerdata, file= filename)
setwd(originalwd)
} #End of create player function!
create("derek", "jeter", 1)
createplayer("derek", "jeter", 1)
setwd("../")
getwd()
createplayer("derek", "jeter", 1)
getwd()
loadplayer <- function (playerfirstname, playerlastname, key=1){
originalwd <- getwd()
setwd("Baseball")
if (key < 10){
key <- substring(toString(key), 1, 1)
key <- paste("0", key, sep="")
}
playerfirstname <- as.character(playerfirstname)
playerlastname <- as.character(playerlastname)
#cleaning names and key to make player identity object
subfirst <- substring(playerfirstname, 1, 2)
sublast <- substring(playerlastname, 1, 5)
identity <- paste(sublast, subfirst, key, sep="")
identity <- tolower(identity)
filename <- paste0(identity, ".csv")
dataframe <- read.csv(filename, header=TRUE)
setwd(originalwd)
dataframe
}
jeter <- loadplayer("derek", "jeter", 1)
head(jeter)
getwd()
source('calendarheat.R')
simple <- transform(jeter, date = as.Date(Date, format = "%b %d, %Y"), h= as.numeric(H), Date=as.character(Date))
sub1 <- subset(simple, format(date, "%Y") %in% c("2013"))
calendarHeat(sub1date,sub1h, date.form = "%b %d, %Y" )
head(sub1)
calendarHeat(sub1$date,sub1$h, date.form = "%b %d, %Y" )
sub1 <- subset(simple, format(date, "%Y") %in% c("2012"))
calendarHeat(sub1$date,sub1$h, date.form = "%b %d, %Y" )
test
set.seed(33)
#setting up condition, gender, interaction.  40 subjects total, 20 for each condition.
N <- 40
condition <- rep(c(0,1), N/2)
gender <- rbinom(n=40,size=1,prob=.5)
interaction <- condition * gender
#Amount of times to replicate
rep <- 5000
# save all the outputs for each replication
p_vals <- matrix(NA, rep, 4)
for (i in 1:rep){
#randomly generate a Y variable, assumed continous and normally distributed,  mean=0, sd=1
y1 <- rnorm(N, mean=0, sd=1)
#Error check of condition alone
model1 <- lm(y1~condition)
p_vals[i, 1] <- summary(model1)[[4]][[8]]
#checking if gender is a covariate of Y, if so we include the p-values
covariatetest <- lm(y1 ~ gender)
if(summary(covariatetest)[[4]][[8]] <.05){
model2 <- lm(y1~condition + gender)
model3 <- lm(y1~condition + gender + interaction)
#p-value of condition variable in [y=condition + gender]
p_vals[i, 2] <- summary(model2)[[4]][[11]]
#p-value of condition variable in [y=condition + gender + interaction]
p_vals[i, 3] <- summary(model3)[[4]][[14]]
#p-value of interaction varaible in [y=condition + gender + intereaction]
p_vals[i, 4] <- summary(model3)[[4]][[16]]
}}
#take the smallest p_value out of the 4 different situations where we would accept condition
min_p_value <- apply(p_vals, 1, min, na.rm=TRUE)
#Error rate estimated with significance at .1, .05, and .01
errorrate_1 <- length(min_p_value[min_p_value<.1])/nrow(p_vals)
errorrate_05 <- length(min_p_value[min_p_value<.05])/nrow(p_vals)
errorrate_01 <- length(min_p_value[min_p_value<.01])/nrow(p_vals)
errorrate_1
errorrate_05
errorrate_01
set.seed(33)
#setting up condition, gender, interaction.  40 subjects total, 20 for each condition.
N <- 40
condition <- rep(c(0,1), N/2)
gender <- rbinom(n=40,size=1,prob=.5)
interaction <- condition * gender
#Amount of times to replicate
rep <- 5000
# save all the outputs for each replication
p_vals <- matrix(NA, rep, 4)
for (i in 1:rep){
#randomly generate a Y variable, assumed continous and normally distributed,  mean=0, sd=1
y1 <- rnorm(N, mean=0, sd=1)
#Error check of condition alone
model1 <- lm(y1~condition)
p_vals[i, 1] <- summary(model1)[[4]][[8]]
#checking if gender is a covariate of Y, if so we include the p-values
covariatetest <- lm(y1 ~ gender)
if(summary(covariatetest)[[4]][[8]] <.05){
model2 <- lm(y1~condition + gender)
model3 <- lm(y1~condition + gender + interaction)
#p-value of condition variable in [y=condition + gender]
p_vals[i, 2] <- summary(model2)[[4]][[11]]
#p-value of condition variable in [y=condition + gender + interaction]
#p_vals[i, 3] <- summary(model3)[[4]][[14]]
#p-value of interaction varaible in [y=condition + gender + intereaction]
p_vals[i, 4] <- summary(model3)[[4]][[16]]
}}
min_p_value <- apply(p_vals, 1, min, na.rm=TRUE)
#Error rate estimated with significance at .1, .05, and .01
errorrate_1 <- length(min_p_value[min_p_value<.1])/nrow(p_vals)
errorrate_05 <- length(min_p_value[min_p_value<.05])/nrow(p_vals)
errorrate_01 <- length(min_p_value[min_p_value<.01])/nrow(p_vals)
errorrate_1
errorrate_05
errorrate_01
base_p <- p_vals[,1]
base_error <- length(min_p_value[base_p<.05])/nrow(base_p)
base_error
base_error <- length(min_p_value[base_p<.05])/length(base_p)
base_error
with_gender_error <- length(min_with_gender[min_with_gender<.05])/nrow(with_gender)
with_gender <- p_vals[,1:2]
min_with_gender <- apply(vwith_gender, 1, min, na.rm=TRUE)
min_with_gender <- apply(with_gender, 1, min, na.rm=TRUE)
with_gender_error <- length(min_with_gender[min_with_gender<.05])/nrow(with_gender)
with_gender_error
base_p <- p_vals[,1]
base_error <- length(base_p[base_p<.05])/length(base_p)
with_gender <- p_vals[,1:2]
min_with_gender <- apply(with_gender, 1, min, na.rm=TRUE)
with_gender_error <- length(min_with_gender[min_with_gender<.05])/nrow(with_gender)
base_error
with_gender_error
errorrate_05
N <- 60
condition <- rep(c(-1,0,1), N/2)
gender <- rbinom(n=60,size=1,prob=.5)
interaction <- condition * gender
#Amount of times to replicate
rep <- 5000
# save all the outputs for each replication
p_vals <- matrix(NA, rep, 4)
for (i in 1:rep){
#randomly generate a Y variable, assumed continous and normally distributed,  mean=0, sd=1
y1 <- rnorm(N, mean=0, sd=1)
#Error check of condition alone
model1 <- lm(y1~condition)
p_vals[i, 1] <- summary(model1)[[4]][[8]]
#checking if gender is a covariate of Y, if so we include the p-values
#covariatetest <- lm(y1 ~ gender)
#if(summary(covariatetest)[[4]][[8]] <.05){
model2 <- lm(y1~condition + gender)
model3 <- lm(y1~condition + gender + interaction)
#p-value of condition variable in [y=condition + gender]
p_vals[i, 2] <- summary(model2)[[4]][[11]]
#p-value of condition variable in [y=condition + gender + interaction]
#p_vals[i, 3] <- summary(model3)[[4]][[14]]
#p-value of interaction varaible in [y=condition + gender + intereaction]
p_vals[i, 4] <- summary(model3)[[4]][[16]]
}
test <- lm(y1~condition)
condition
y1
length(condition)
length(y1)
condition <- rep(c(-1,0,1), N/3)
set.seed(33)
#setting up condition, gender, interaction.  40 subjects total, 20 for each condition.
N <- 60
condition <- rep(c(-1,0,1), N/3)
gender <- rbinom(n=60,size=1,prob=.5)
interaction <- condition * gender
#Amount of times to replicate
rep <- 5000
# save all the outputs for each replication
p_vals <- matrix(NA, rep, 4)
for (i in 1:rep){
#randomly generate a Y variable, assumed continous and normally distributed,  mean=0, sd=1
y1 <- rnorm(N, mean=0, sd=1)
#Error check of condition alone
model1 <- lm(y1~condition)
p_vals[i, 1] <- summary(model1)[[4]][[8]]
#checking if gender is a covariate of Y, if so we include the p-values
#covariatetest <- lm(y1 ~ gender)
#if(summary(covariatetest)[[4]][[8]] <.05){
model2 <- lm(y1~condition + gender)
model3 <- lm(y1~condition + gender + interaction)
#p-value of condition variable in [y=condition + gender]
p_vals[i, 2] <- summary(model2)[[4]][[11]]
#p-value of condition variable in [y=condition + gender + interaction]
#p_vals[i, 3] <- summary(model3)[[4]][[14]]
#p-value of interaction varaible in [y=condition + gender + intereaction]
p_vals[i, 4] <- summary(model3)[[4]][[16]]
}
#}
#take the smallest p_value out of the 4 different situations where we would accept condition
min_p_value <- apply(p_vals, 1, min, na.rm=TRUE)
#Error rate estimated with significance at .1, .05, and .01
errorrate_1 <- length(min_p_value[min_p_value<.1])/nrow(p_vals)
errorrate_05 <- length(min_p_value[min_p_value<.05])/nrow(p_vals)
errorrate_01 <- length(min_p_value[min_p_value<.01])/nrow(p_vals)
errorrate_1
errorrate_05
errorrate_01
base_p <- p_vals[,1]
base_error <- length(base_p[base_p<.05])/length(base_p)
with_gender <- p_vals[,1:2]
min_with_gender <- apply(with_gender, 1, min, na.rm=TRUE)
with_gender_error <- length(min_with_gender[min_with_gender<.05])/nrow(with_gender)
base_error
with_gender
base_error
with_gender_error
errorrate_05
set.seed(33)
#setting up condition, gender, interaction.  40 subjects total, 20 for each condition.
N <- 60
condition <- rep(c(-1,0,1), N/3)
gender <- rbinom(n=60,size=1,prob=.5)
interaction <- condition * gender
#Amount of times to replicate
rep <- 5000
# save all the outputs for each replication
p_vals <- matrix(NA, rep, 4)
for (i in 1:rep){
#randomly generate a Y variable, assumed continous and normally distributed,  mean=0, sd=1
y1 <- rnorm(N, mean=0, sd=1)
#Error check of condition alone
model1 <- lm(y1~condition)
p_vals[i, 1] <- summary(model1)[[4]][[8]]
#checking if gender is a covariate of Y, if so we include the p-values
#covariatetest <- lm(y1 ~ gender)
#if(summary(covariatetest)[[4]][[8]] <.05){
model2 <- lm(y1~condition + gender)
model3 <- lm(y1~condition + gender + interaction)
#p-value of condition variable in [y=condition + gender]
p_vals[i, 2] <- summary(model2)[[4]][[11]]
#p-value of condition variable in [y=condition + gender + interaction]
p_vals[i, 3] <- summary(model3)[[4]][[14]]
#p-value of interaction varaible in [y=condition + gender + intereaction]
p_vals[i, 4] <- summary(model3)[[4]][[16]]
}
#}
#take the smallest p_value out of the 4 different situations where we would accept condition
min_p_value <- apply(p_vals, 1, min, na.rm=TRUE)
#Error rate estimated with significance at .1, .05, and .01
errorrate_1 <- length(min_p_value[min_p_value<.1])/nrow(p_vals)
errorrate_05 <- length(min_p_value[min_p_value<.05])/nrow(p_vals)
errorrate_01 <- length(min_p_value[min_p_value<.01])/nrow(p_vals)
errorrate_1
errorrate_05
errorrate_01
library(XML)
library(RCurl)
library(lubridate)
library(dplyr)
url <- "http://www.hockey-reference.com/leagues/NHL_2014_games.html"
html <- htmlTreeParse(url, useInternal=TRUE)
tables <- readHTMLTable(html)
season<- tables$games
playoffs <- tables$games_playoffs
#Row rename and variable transformation
names(season)[5:6] <- c("G.1", "OT")
season <- transform(season, Notes = as.character(Notes), Date = as.character(Date), G= as.character(G), G.1= as.character(G.1))
season <- transform(season, Date = as.Date(Date))
#Get's rid of postponed games
season <- subset(season, G!= "")
rows <- nrow(season)
#puts in W/L factor for both Visitor and Home.
i<-1
while (i <= rows){
if(season$G[i]<season$G.1[i]){
season$V.W[i] <- "L"
season$H.W[i] <- "W"
} else {
season$V.W[i] <- "W"
season$H.W[i] <- "L"}
i<-i+1
}
#Creates a dataframe with all games based on visiting team
visitorgames <- season[,c(1,2,3,6,8,7)]
visitorgames$Home_Away <- "A"
names(visitorgames)[2] <- "Team"
names(visitorgames)[5] <- "W"
#Creates a dataframe with all games based on home team
homegames <- season[,c(1,4,5,6,9,7)]
homegames$Home_Away <- "H"
names(homegames)[2] <- "Team"
names(homegames)[3] <- "G"
names(homegames)[5] <- "W"
#Combines visiter based games and Home based games into one dataframe
allgames <- rbind(homegames, visitorgames)
allgames <- arrange(allgames, Team, Date)
daysoff <- data.frame(do.call("cbind", by(allgames, allgames$Team, function(x) as.numeric(x$Date-lag(x$Date)))))
daysoffvector <- unlist(daysoff)
allgames <- cbind(allgames, daysoffvector)
suball <- data.frame(cbind(allgames$W, allgames$daysoffvector))
table<- data.frame(table(suball))
table
getwd()
rm(allgames)
setwd("github/colleges")
load("variables.Rdata")
getwd()
load("finaltable.Rdata")
head(final)
